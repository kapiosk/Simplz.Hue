@page "/"
@using Simplz.Hue.Models;
@inject Simplz.Hue.Services.HueService HueService
<PageTitle>Index</PageTitle>

<div class="card">
    <h5 class="card-header">Room</h5>
    <div class="card-body">
        @if (Rooms is not null)
        {
            <select @bind="SelectedRoomId" class="form-select">
                @foreach (var room in Rooms)
                {
                    <option value="@room.Id">@room.Name</option>
                }
            </select>
        }
        <button type="button" class="btn btn-success" @onclick=TurnOnAsync>On</button>
        <button type="button" class="btn btn-danger" @onclick=TurnOffAsync>Off</button>
    </div>
</div>

<div class="card">
    <h5 class="card-header">Scene</h5>
    <div class="card-body">
        @if (Scenes is not null)
        {
            <select @bind="SelectedSceneId" class="form-select">
                @foreach (var (sceneId, name) in Scenes)
                {
                    <option value="@sceneId">@name</option>
                }
            </select>
        }
        <button type="button" class="btn btn-primary" @onclick=ActivateSceneAsync>Activate Scene</button>
        <button type="button" class="btn btn-info" @onclick=ApplySceneAsync>Apply Scene to Room</button>
    </div>
</div>

<div class="card">
    <h5 class="card-header">Dimmer</h5>
    <input type="range" class="form-range" min="0" max="100" step="0.01" @onchange=ApplyDimmerAsync>
</div>

@code {
    List<Room>? Rooms { get; set; }
    List<(Guid, string)>? Scenes { get; set; }
    Guid SelectedRoomId { get; set; }
    Guid SelectedSceneId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Rooms = await HueService.GetGroupsAsync();
        Scenes = await HueService.GetScenesAsync();
        SelectedRoomId = Rooms.First().Id;
        SelectedSceneId = Scenes.First().Item1;
    }

    async Task ApplyDimmerAsync(ChangeEventArgs eventArgs)
    {
        if (eventArgs.Value is not null)
            await HueService.ApplyDimmerAsync(SelectedRoomId, double.Parse((string)eventArgs.Value));
    }

    async Task ApplySceneAsync()
    {
        await HueService.ApplySceneAsync(SelectedSceneId, SelectedRoomId);
    }

    async Task ActivateSceneAsync()
    {
        await HueService.ActivateSceneAsync(SelectedSceneId);
    }

    async Task TurnOnAsync()
    {
        await HueService.TurnOnAsync(SelectedRoomId);
    }

    async Task TurnOffAsync()
    {
        await HueService.TurnOffAsync(SelectedRoomId);
    }
}
